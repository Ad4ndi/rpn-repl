(define (interpret token)
  (cond
    ((let ((n (string->number token)))
      (if n (begin (push n) #t) #f)))
    ((string=? token "+")     (2-arg (lambda (a b) (+ a b))))
    ((string=? token "-")     (2-arg (lambda (a b) (- a b))))
    ((string=? token "*")     (2-arg (lambda (a b) (* a b))))
    ((string=? token "/")     (2-arg (lambda (a b) (if (= b 0) (error "Division by zero") (/ a b)))))
    ((string=? token "^")     (2-arg (lambda (a b) (expt a b))))
    ((string=? token "%")     (2-arg (lambda (a b) (modulo a b))))

    ((string=? token "log")   (2-arg (lambda (a b) (/ (log b) (log a)))))
    ((string=? token "ln")    (1-arg  (lambda (a) (log a))))
    ((string=? token "!")     (1-arg  (lambda (n) (let loop ((x n) (acc 1)) (if (<= x 1) acc (loop (- x 1) (* acc x)))))))
    ((string=? token "sqrt")  (1-arg  (lambda (a) (sqrt a))))
    ((string=? token "rt")    (2-arg (lambda (a b) (expt a (/ 1 b)))))

    ((string=? token "sum")   (let ((result (apply + stack))) (set! stack '()) (push result)))
    ((string=? token "prod")  (let ((result (apply * stack))) (set! stack '()) (push result)))

    ((string=? token "sin")   (1-arg (lambda (a) (sin a))))
    ((string=? token "cos")   (1-arg (lambda (a) (cos a))))
    ((string=? token "tan")   (1-arg (lambda (a) (tan a))))
    ((string=? token "cot")   (1-arg (lambda (a) (/ 1 (tan a)))))
    ((string=? token "sec")   (1-arg (lambda (a) (/ 1 (cos a)))))
    ((string=? token "csc")   (1-arg (lambda (a) (/ 1 (sin a)))))

    ((string=? token "asin")  (1-arg (lambda (a) (asin a))))
    ((string=? token "acos")  (1-arg (lambda (a) (acos a))))
    ((string=? token "atan")  (1-arg (lambda (a) (atan a))))
    ((string=? token "acot")  (1-arg (lambda (a) (atan (/ 1 a)))))
    ((string=? token "asec")  (1-arg (lambda (a) (acos (/ 1 a)))))
    ((string=? token "acsc")  (1-arg (lambda (a) (asin (/ 1 a)))))

    ((string=? token "sinh")  (1-arg (lambda (a) (sinh a))))
    ((string=? token "cosh")  (1-arg (lambda (a) (cosh a))))
    ((string=? token "tanh")  (1-arg (lambda (a) (tanh a))))
    ((string=? token "coth")  (1-arg (lambda (a) (if (= a 0) (error "Division by zero") (coth a)))))
    ((string=? token "sech")  (1-arg (lambda (a) (if (= a 0) 1 (/ 1 (cosh a))))))
    ((string=? token "csch")  (1-arg (lambda (a) (if (= a 0) (error "Division by zero") (/ 1 (sinh a))))))

    ((string=? token "asinh") (1-arg (lambda (a) (log (+ a (sqrt (+ (* a a) 1)))))))
    ((string=? token "acosh") (1-arg (lambda (a) (log (+ a (sqrt (- (* a a) 1)))))))
    ((string=? token "atanh") (1-arg (lambda (a) (* 0.5 (log (/ (+ 1 a) (- 1 a)))))))
    ((string=? token "acoth") (1-arg (lambda (a) (* 0.5 (log (/ (+ a 1) (- a 1)))))))
    ((string=? token "asech") (1-arg (lambda (a) (log (+ a (sqrt (- (* a a) 1)))))))
    ((string=? token "acsch") (1-arg (lambda (a) (log (+ (/ 1 a) (sqrt (+ (/ 1 (* a a)) 1)))))))

    ((string=? token "round") (1-arg (lambda (a) (round a))))
    ((string=? token "clear") (set! stack '()))
    (else (error "Unknown command: " token))))
